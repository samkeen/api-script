# Fenphen Service

# for any interaction (PUT|PATCH|DELETE) with a Resource, there must
#   first be a Resource, these are the properties to use to create those
#   sacrificial Resources
#
# ex: For a Get tests, the test framework:
#   - first creates a Resource (POST)
#   - then runs the Get under test
#   - finally the test framework issues a Delete request for cleanup
#===================================================================
# The machine presumes no Resources pre-exist to to test GET, it must
# first create a resource.
# These templates are used to create those resources.
resource_templates:
  /product:
    name: php::uniqid()

tests:
    # test names need to be in the format:
    # '{http method} ... {path}'
    #
    # start/end slashes are optional for {path}
    # i.e 'product', '/product' and '/product' are all parsed as: '/product
    #'
    GET all product:
      comment: just ensure the get all URL, '/product' returns 200

    GET product:
      comment: Create a product(POST) then assert you can GET it
      expected_properties:
        - id
        - name
        - created
        - modified

    POST product:
      comment: Test the successful POST of a product

    DELETE product:
      comment: Test the successful DELETE of a product

    PATCH product:
      comment: Test the successful PATCH of a product
      patch_properties:
        name: php::uniXqid()

    PUT product:
      comment: Test the successful PUT of a product
      put_properties:
        name: php::uniqid()

    GET all tag:
      comment: just ensure the get all URL, '/tag' returns 200

    GET tag:
      comment: Create a tag(POST) then assert you can GET it
      expected_properties:
        - id
        - name
        - created
        - modified

    GET all robot:
      comment: just ensure the get all URL, '/robot' returns 200